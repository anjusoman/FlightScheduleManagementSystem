version: '3.8'
services:
  dynamodb:
    container_name: dynamodb
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    ports:
      - "8000:8000"
    volumes:
      - "./DynamoDB:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    healthcheck:
      test: [ "CMD-SHELL", '[ "$(curl -s -o /dev/null -I -w ''%{http_code}'' http://localhost:8000)" == "400" ]' ]
      interval: 10s
      timeout: 10s
      retries: 10

  dynamodb-local-setup:
    container_name: dynamodb-local-setup
    depends_on:
      dynamodb:
        condition: service_healthy
    image: amazon/aws-cli
    volumes:
      - "./DynamoDB/schemas:/tmp/dynamo"
    environment:
      AWS_ACCESS_KEY_ID: 'FAKEID'
      AWS_SECRET_ACCESS_KEY: 'FAKEKEY'
      AWS_REGION: 'us-east-2'
    entrypoint:
      - bash
    command:
      - '-c'
      - |
        aws dynamodb list-tables --endpoint-url http://dynamodb:8000 --query "TableNames" --output text | grep -w ScheduledFlight \
        || aws dynamodb create-table --endpoint-url http://dynamodb:8000 --cli-input-json file:///tmp/dynamo/ScheduledFlight.json
  
  scheduling-service:
    container_name: scheduling-service
    build:
      context: SchedulingService
      dockerfile: Dockerfile
    depends_on:
      dynamodb-local-setup:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    volumes:
      - .:/app  
      - /app/build  
    restart: on-failure
           
  flight-status-dashboard:
    container_name: flight-status-dashboard
    build:
      context: FlightStatusDashboard
      dockerfile: Dockerfile
    ports:
      - "5000:5000" 
    volumes:
      - ./FlightStatusDashboard:/app
    environment:
      FLASK_APP: FlightStatusDashboard:app   

  localstack:
    container_name: localstack
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4510-4559:4510-4559" 
      - "127.0.0.1:4566:4566" 
    environment:
      - DEBUG=0
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SERVICES=lambda,events
      - AWS_ACCESS_KEY_ID=FAKEID
      - AWS_SECRET_ACCESS_KEY=FAKEKEY
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./LocalStack/setup_localstack.sh:/usr/local/bin/setup_localstack.sh
      - ./LocalStack/create_lambda.bash:/usr/local/bin/create_lambda.bash
    entrypoint: ["/bin/sh", "-c", "/usr/local/bin/setup_localstack.sh && localstack start"]